encoding('utf8').

% ciferoj, t.e. nombroj de 1 ghis 9

cifero(unu,1).
cifero(du,2).
cifero(tri,3).
cifero(kvar,4).
cifero(kvin,5).
cifero(ses,6).
cifero(sep,7).
cifero(ok,8).

cifero(naux,9).
cifero('na\u016d',9).
%cifero('naÅ­',9.
cifero(nau,9).

% dekoj, t.e. 10, 20 ... 90

dekoj(dek,10).
dekoj(Nombro,N) :-
  atom(Nombro),
  atom_concat(Cifero,dek,Nombro),
  cifero(Cifero,C),!,
  N is C*10.

dekoj(Nombro,N) :-
  integer(N),
  D is N / 10, D>1, 
  cifero(ND,D),!,
  atom_concat(ND,dek,Nombro).

% centoj, t.e. 100, 200, ... 900

centoj(cent,100).
centoj(Nombro,N) :-
  atom(Nombro),
  atom_concat(Cifero,cent,Nombro),
  cifero(Cifero,C),!,
  N is C*100.

centoj(Nombro,N) :-
  integer(N),
  C is N / 100, C>1, 
  cifero(NC,C),!,
  atom_concat(NC,cent,Nombro).

% nombroj de 1 ghis 999

n3(Nombro,N) :-
  (centoj(Nombro,N); 
  dekoj(Nombro,N);
  cifero(Nombro,N)),!.

n3(Nombro,N) :-
  atom(Nombro),
  atomic_list_concat([Centoj,Dekoj,Unuoj],' ',Nombro),!,
  centoj(Centoj,C),
  dekoj(Dekoj,D),
  cifero(Unuoj,U),
  N is C + D + U.

n3(Nombro,N) :-
  atom(Nombro),
  atomic_list_concat([Centoj,Dekoj],' ',Nombro),
  centoj(Centoj,C),
  dekoj(Dekoj,D),!,
  N is C + D.

n3(Nombro,N) :-
  atom(Nombro),
  atomic_list_concat([Dekoj,Unuoj],' ',Nombro),
  dekoj(Dekoj,D),
  cifero(Unuoj,U),!,
  N is D + U.

n3(Nombro,N) :-
  atom(Nombro),
  atomic_list_concat([Centoj,Unuoj],' ',Nombro),
  centoj(Centoj,C),
  cifero(Unuoj,U),!,
  N is C + U.

n3(Nombro,N) :-
  integer(N),
  cifero(Nombro,N).

n3(Nombro,N) :-
  integer(N), N>100,
  C is N div 100,
  N1 is N mod 100,
  D is N1 div 10,
  U is N1 mod 10,
  (C>1, cifero(NC,C); C=1, NC = ''),
  (D>1, cifero(ND,D); D=1, ND = ''),
  cifero(NU,U),!,
  atomic_list_concat([NC,cent,' ',ND,dek,' ',NU],'',Nombro).  

n3(Nombro,N) :-
  integer(N), N<100,
  D is N div 10,
  U is N mod 10,
  (D>1, cifero(ND,D); D=1, ND=''),
  cifero(NU,U),!,
  atomic_list_concat([ND,dek,' ',NU],'',Nombro).

% nombroj de 1 ghis 999999

n6(Nombro,N) :-
  n3(Nombro,N),!.

n6(mil,1000).

n6(Nombro,N) :-
  atom(Nombro),
  atomic_list_concat([No1_,No2_],'mil',Nombro),
  normalize_space(atom(No1),No1_),
  normalize_space(atom(No2),No2_),
  (n3(No1,N1); atom_length(No1,0), N1 is 1),
  (n3(No2,N2); atom_length(No2,0), N2 is 0),!,
  N is N1 * 1000 + N2.

%n6(Nombro,N) :-
%  integer(N), N<1000,!,
%  n3(Nombro,N).

n6(Nombro,N) :-
  integer(N), N>1000,!,
  M is N div 1000,
  S is N mod 1000,
  (M>1, n3(Miloj,M); M=1, Miloj=''),
  n3(Submiloj,S),
  atomic_list_concat([Miloj,'mil',Submiloj],' ',Nombro_),
  normalize_space(atom(Nombro),Nombro_).
 
% nombroj ghis 10^12 - 1

n12(Nombro,N) :-
  integer(N), N<10,!,
  cifero(Nombro,N).

n12(Nombro,N) :-
  integer(N), N<100,!,
  D is N div 10,
  U is N mod 10,
  (D>1, n12(Dekoj,D),!; Dekoj=''),
  n12(Unuoj,U),
  atomic_list_concat([Dekoj,'dek',' ',Unuoj],Nombro).

n12(Nombro,N) :-
  integer(N), N<1000,!,
  C is N div 100,
  D is N mod 100,
  (C>1, n12(Centoj,C),!; Centoj=''),
  n12(Dekoj,D),
  atomic_list_concat([Centoj,'cent',' ',Dekoj],Nombro).

n12(Nombro,N) :-
  integer(N), N<1000000,!,
  M is N div 1000,
  S is N mod 1000,
  (M>1, n12(Miloj,M),!; Miloj=''),
  n12(SubMiloj,S),
  atomic_list_concat([Miloj,'mil',SubMiloj],' ',Nombro).

n12(Nombro,N) :-
  integer(N), N<2000000,!,
  S is N mod 1000000,
  n12(SubMilionoj,S),
  atomic_list_concat(['unu miliono',SubMilionoj],' ',Nombro).

n12(Nombro,N) :-
  integer(N), N<1000000000,!,
  M is N div 1000000,
  S is N mod 1000000,
  n12(Milionoj,M),
  n12(SubMilionoj,S),
  atomic_list_concat([Milionoj,'milionoj',SubMilionoj],' ',Nombro).

n12(Nombro,N) :-
  integer(N), N<2000000000,!,
  S is N mod 1000000000,
  n12(SubMiliardoj,S),
  atomic_list_concat(['unu miliardo',SubMiliardoj],' ',Nombro).

n12(Nombro,N) :-
  integer(N), N<1000000000000,!,
  M is N div 1000000000,
  S is N mod 1000000000,
  n12(Miliardoj,M),
  n12(SubMiliardoj,S),
  atomic_list_concat([Miliardoj,'miliardoj',SubMiliardoj],' ',Nombro).


% nombri lauvorte

nombru(De,Ghis) :-
  between(De,Ghis,N),
  n12(Nombro,N),
  write(Nombro),nl,fail.
  
  

